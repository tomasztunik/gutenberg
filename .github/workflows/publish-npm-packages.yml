name: Publish npm packages

on:
    workflow_dispatch:
        inputs:
            release_type:
                description: 'latest, next, or bugfix?'
                required: true
            version:
                description: 'patch, minor, or major?'
                required: true

env:
    WORDPRESS_RELEASE_BRANCH: ${{ github.event.inputs.release_type == 'next' && 'wp/next' || 'wp/trunk' }}

# Cancels all previous workflow runs for pull requests that have not completed.
concurrency:
    # The concurrency group contains the workflow name and the branch name for pull requests
    # or the commit hash for any other events.
    group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
    cancel-in-progress: true

jobs:
    sync-wordpress-branch:
        name: Sync the WordPress release branch
        runs-on: ubuntu-latest
        outputs:
            plugin_version: ${{ steps.get_version.outputs.plugin_version }}
            plugin_release_branch: ${{ steps.get_version.outputs.plugin_release_branch }}

        steps:
            - name: Checkout code
              uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # v2.3.4

            - name: Compute plugin release branch
              id: get_version
              run: |
                  PLUGIN_VERSION=$(jq --raw-output '.version' package.json)
                  echo "::set-output name=plugin_version::$(echo $PLUGIN_VERSION)"
                  IFS='.' read -r -a PLUGIN_VERSION_ARRAY <<< "$PLUGIN_VERSION"
                  PLUGIN_RELEASE_BRANCH="release/${PLUGIN_VERSION_ARRAY[0]}.${PLUGIN_VERSION_ARRAY[1]}"
                  echo "::set-output name=plugin_release_branch::$(echo $PLUGIN_RELEASE_BRANCH)"

            - name: Configure git user name and email
              run: |
                  git config user.name "Gutenberg Repository Automation"
                  git config user.email gutenberg@wordpress.org

            - name: Switch to WordPress release branch
              run: |
                  git fetch --depth=100 origin "$WORDPRESS_RELEASE_BRANCH"
                  git checkout "$WORDPRESS_RELEASE_BRANCH"

            - name: Sync the WordPress release branch with the changes from the latest plugin release
              if: |
                  github.event.inputs.release_type == 'latest' ||
                  github.event.inputs.release_type == 'next'
              run: |
                  git rm -r .
                  git fetch --depth=1 origin "${{ steps.get_version.outputs.plugin_release_branch }}"
                  git checkout origin/"${{ steps.get_version.outputs.plugin_release_branch }}" -- .

            - name: Commit the changes to the WordPress release branch
              if: |
                  github.event.inputs.release_type == 'latest' ||
                  github.event.inputs.release_type == 'next'
              run: |
                  git commit -m "Merge changes published in the Gutenberg plugin ${{ steps.get_version.outputs.plugin_release_branch }} branch"
                  git push --set-upstream origin "$WORDPRESS_RELEASE_BRANCH"

    update-packages:
        name: Update Packages
        runs-on: ubuntu-latest
        needs: sync-wordpress-branch

        steps:
            - name: Checkout code
              uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # v2.3.4
              with:
                  ref: ${{ env.WORDPRESS_RELEASE_BRANCH }}

            - name: Use desired version of NodeJS
              uses: actions/setup-node@38d90ce44d5275ad62cc48384b3d8a58c500bb5f # v2.2.2
              with:
                  node-version: 14
                  cache: npm

            - name: Configure git user name and email
              run: |
                  git config user.name "Gutenberg Repository Automation"
                  git config user.email gutenberg@wordpress.org

            - name: Update package versions
              id: update_package_versions
              run: |
                  PUBLIC_PACKAGES=$(find packages/*/ -type d -maxdepth 0 -exec sh -c 'jq -e ".private != true" "$1"/package.json > /dev/null && test -f "$1"/CHANGELOG.md && echo "$1"' shell {} \;)
                  production_package_names=$(jq '.dependencies | keys | @sh' package.json)
                  minimum_version_bump='patch'
                  while IFS= read -r package; do
                    changes_detected=false
                    version_bump=
                    next_version=
                    while IFS= read -r line; do
                      if [[ "$line" = '## Unreleased' ]]; then
                        changes_detected=true
                        continue
                      fi
                      if [[ "$changes_detected" = false ]]; then
                        continue;
                      fi
                      case $line in
                        '## '*)
                          break
                          ;;
                        '### Breaking Change'*)
                          version_bump=major
                          break
                          ;;
                        '### Deprecation'*|'### Enhancement'*|'### New API'*|'### New Feature'*)
                          version_bump=minor
                          continue
                          ;;
                        '### '*|*-*)
                          if [[ "$version_bump" != 'minor' ]]; then
                            version_bump="$minimum_version_bump"
                          fi
                      esac
                    done < "$package"CHANGELOG.md
                    package_name=${package#'packages/'}
                    package_name="@wordpress/${package_name%'/'}"
                    if [ -z "$version_bump" ] && \
                       [ '${{ github.event.inputs.release_type }}' != 'next' ] && \
                       [ "$minimum_version_bump" != 'patch' ]
                    then
                        case "$production_package_names" in
                          *"'$package_name'"*)
                            version_bump="$minimum_version_bump"
                        esac
                    fi
                    version=$(jq --raw-output '.version' "$package"package.json)
                    if [ -n "$version_bump" ]; then
                      next_version=$(npx semver "$version" -i "$version_bump")
                    fi
                    if [ -n "$next_version" ]; then
                      cat <<< $(jq --tab --arg version "${next_version}-prerelease" '.version = $version' "$package"package.json) > "$package"package.json
                      if [ '${{ github.event.inputs.release_type }}' = 'next' ]; then
                        next_version="${next_version}-next.0"
                      fi
                      sed -i "s/## Unreleased/\n\n## ${next_version} ($(date +%F))/g" "$package"CHANGELOG.md
                    fi
                  done <<< $PUBLIC_PACKAGES
                  git commit -am "Update changelog files"
                  git push --set-upstream origin "$WORDPRESS_RELEASE_BRANCH"
                  echo "::set-output name=changelog_commit::$(git rev-parse --verify --short HEAD)"

            - name: Fetch trunk
              run: git fetch --depth=1 origin trunk

            - name: Cherry-pick the changelog update commit to trunk
              run: |
                  git checkout trunk
                  git pull
                  git cherry-pick "${{ steps.update_package_versions.outputs.changelog_commit }}"
                  git push

    publish-packages:
        name: Publish Packages
        runs-on: ubuntu-latest
        needs: update-packages

        steps:
            - name: Checkout code
              uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # v2.3.4
              with:
                  ref: ${{ env.WORDPRESS_RELEASE_BRANCH }}

            - name: Use desired version of NodeJS
              uses: actions/setup-node@38d90ce44d5275ad62cc48384b3d8a58c500bb5f # v2.2.2
              with:
                  node-version: 14
                  cache: npm

            - name: Npm install and build
              run: |
                  npm ci
                  npm run build

            - name: Publish packages
              if: github.event.inputs.release_type == 'next'
              run: |
                  minimum_version_bump='patch'
                  if [ '${{ github.event.inputs.release_type }}' = 'next' ]; then
                    sha=$(git rev-parse --short HEAD)
                    npx lerna version pre"$minimum_version_bump" --preid next."$sha" --no-private
                    npx lerna publish from-package --dist-tag next
                  elif [ '${{ github.event.inputs.release_type }}' = 'bugfix' ]; then
                    npx lerna publish
                  else
                    npx lerna version "$minimum_version_bump" --no-private
                    npx lerna publish from-package
                  fi
